buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
//apply plugin: 'eclipse'
//apply plugin: 'maven-publish'
apply plugin: "idea"

idea.module {
    for (String excludeDirName in [".gradle", ".idea", "build", "gradle", "media", "run", "out", "logs"]) {
        excludeDirs += file(excludeDirName)
    }
}

version = '1.0'
group = 'com.lich.magecraft' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'magecraft'

// Need this here so eclipse task generates correctly.
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.4-35.1.0'
}

minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    runs {
        client {
            workingDirectory project.file('run')
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                magecraft {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                magecraft {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'magecraft', '--all',
                    '--existing', file('src/main/resources'),
                    '--existing', file('src/generated/resources'),
                    '--output', file('src/generated/resources')
            mods {
                magecraft {
                    source sourceSets.main
                }
            }
        }
    }
}

// It is necessary to add the generated data directory (like below) if you have the generated data output to a different
// location than your normal resource directory (src/main/resources). As I've done in the 'data' section above.
sourceSets.main.resources {
    srcDirs += 'src/generated/resources'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "magecraft",
            "Specification-Vendor": "Lich",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Lich",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
//jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

/*publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}*/